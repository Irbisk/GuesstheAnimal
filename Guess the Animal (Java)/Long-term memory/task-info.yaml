type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |+
    package animals;

    public class Main {
        public static void main(String[] args) {
            new Program().start();
        }
    }

  learner_created: false
- name: src/animals/TimeDefiner.java
  visible: true
  text: |
    package animals;

    import java.time.LocalTime;

    public class TimeDefiner {

        public static void getGreetings() {
            LocalTime localTime = LocalTime.now();
            LocalTime morning = LocalTime.of(5, 0);
            LocalTime afternoon = LocalTime.NOON;
            LocalTime evening = LocalTime.of(18, 0);
            LocalTime night = LocalTime.of(23, 59);
            LocalTime earlyBird = LocalTime.of(3, 0);

            if (localTime.isAfter(morning) && localTime.isBefore(afternoon)) {
                System.out.println("Good morning!");
            } else if (localTime.isAfter(afternoon) && localTime.isBefore(evening)) {
                System.out.println("Good afternoon!");
            } else if (localTime.isAfter(evening) && localTime.isBefore(night)) {
                System.out.println("Good evening!");
            } else if (localTime.isAfter(LocalTime.MIDNIGHT) && localTime.isBefore(earlyBird)) {
                System.out.println("Hi, Night Owl");
            } else if (localTime.isAfter(earlyBird) && localTime.isBefore(morning)) {
                System.out.println("Hi, Early Bird");
            } else {
                System.out.println("What time is it now?");
            }
        }

    }
  learner_created: false
- name: src/animals/Answer.java
  visible: true
  text: |
    package animals;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;

    public class Answer {

        public static String handleYesOrNo(String answer) {
            String isPositive = "(y|yes|yeah|yep|sure|right|affirmative|correct|indeed|you bet|exactly|you said it)[.!]?";
            String isNegative = "(n|no|no way|nah|nope|negative|i don't think so|yeah no)[.!]?";
            if (answer.strip().toLowerCase().matches(isPositive)) {
                return "Yes";
            } else if (answer.strip().toLowerCase().matches(isNegative)) {
                return "No";
            } else {
                return askAgain();
            }
        }

        public static String askAgain() {

            List<String> list = new ArrayList<>();
            list.add("I'm not sure I caught you: was it yes or no?");
            list.add("Oh, it's too complicated for me: just tell me yes or no.");
            list.add("Funny, I still don't understand, is it yes or no?");
            list.add("Could you please simply say yes or no?");
            list.add("Oh, no, don't try to confuse me: say yes or no.");

            return list.get(new Random().nextInt(list.size()));
        }

        public static void sayGoodBye() {
            List<String> list = new ArrayList<>();
            list.add("Have a good one!");
            list.add("Take care!");
            list.add("See you later!");
            list.add("Talk to you later!");
            list.add("Catch you later!");
            list.add("Farewell!");
            list.add("Bye-bye");
            list.add("So long!");
            list.add("All right then!");
            list.add("Take it easy");
            list.add("Cheers!");
            list.add("Peace!");
            list.add("Iâ€™m out of here");
            list.add("Toodle-oo!");
            list.add("See you later alligator!");

            System.out.println(list.get(new Random().nextInt(list.size())));
        }

    }
  learner_created: false
- name: src/animals/AnimalIdentifier.java
  visible: true
  text: |
    package animals;

    public class AnimalIdentifier {

        public static String getAnimalName(String text, boolean withArticle) {
            StringBuilder stringBuilder = new StringBuilder();
            String article = null;

            String[] fullText = text.toLowerCase().split(" ");
            if (fullText.length == 1) {
                stringBuilder.append(fullText[0]);
            } else {
                int start = 0;

                switch (fullText[0]) {
                    case "an":
                        article = "an";
                        start = 1;
                        break;
                    case "a":
                        article = "a";
                        start = 1;
                        break;
                    case "the":
                        start = 1;
                        break;
                }
                for (int i = start; i < fullText.length; i++) {
                    if (i == fullText.length - 1) {
                        stringBuilder.append(fullText[i]);
                    } else {
                        stringBuilder.append(fullText[i]).append(" ");
                    }
                }
            }
            article = getArticle(stringBuilder.toString(), article);

            if (withArticle) {
                return article + " " + stringBuilder;
            } else {
                return stringBuilder.toString();
            }


        }

        private static String getArticle(String animal, String article) {
            String vowels = "[aeiou]+.*";
            if (article == null) {
                if (animal.matches(vowels)) {
                    return "an";
                } else return "a";
            } else {
                return article;
            }
        }
    }
  learner_created: false
- name: src/animals/Program.java
  visible: true
  text: |
    package animals;

    import java.util.Scanner;

    public class Program {
        private final Scanner scanner = new Scanner(System.in);
        private BinaryTree binaryTree = new BinaryTree();


        public void start() {
            boolean playAgain = false;

            TimeDefiner.getGreetings();
            System.out.println();
            System.out.println("I want to learn about animals.\n" +
                    "Which animal do you like most?");
            Node root = new Node(AnimalIdentifier.getAnimalName(scanner.nextLine(), true));
            binaryTree.insert(root.getData(), "Yes");
            binaryTree.setCurrentToStart();
            System.out.println("Wonderful! I've learned so much about animals!\n" +
                    "Let's play a game!\n" +
                    "You think of an animal, and I guess it.\n" +
                    "Press enter when you're ready.");
            scanner.nextLine();

            while (true) {
                if (playAgain) {
                    System.out.println("You think of an animal, and I guess it.\n" +
                            "Press enter when you're ready.");
                    playAgain = false;
                    scanner.nextLine();
                }



                if (binaryTree.isAtEnd()) {
                    System.out.println(Description.getQuestion(binaryTree.getCurrentData()));
                    String answer = askYesOrNo();
                    if (answer.equals("Yes")) {
                        System.out.println("You WIN!");
                        System.out.println("Would you like to play again?");
                        answer = askYesOrNo();
                        if (answer.equals("No")) {
                            Answer.sayGoodBye();
                            break;
                        } else {
                            playAgain = true;
                        }
                    } else {
                        giveUp();
                        System.out.println("Would you like to play again?");
                        answer = askYesOrNo();
                        if (answer.equals("No")) {
                            Answer.sayGoodBye();
                            break;
                        } else {
                            playAgain = true;
                        }
                    }

                } else {
                    String question = binaryTree.getCurrentData();
                    System.out.println(question);

                    String answer = askYesOrNo();

                    if (answer.equals("Yes")) {
                        binaryTree.moveCurrentToYes();

                    } else if (answer.equals("No")) {
                        if (binaryTree.current.left == null) {
                            giveUp();
                        } else {
                            binaryTree.moveCurrentToNo();
                        }
                    }
                }
            }
        }

        private void giveUp() {
            String oldAnimal = binaryTree.getCurrentData();
            String animal;
            String newQuestion;

            System.out.println("I give up. What animal do you have in mind?");
            animal = AnimalIdentifier.getAnimalName(scanner.nextLine(), true);
            System.out.println("Specify a fact that distinguishes " + oldAnimal +
                    " from " + animal + ".\n" +
                    "The sentence should satisfy one of the following templates:\n" +
                    "- It can ...\n" +
                    "- It has ...\n" +
                    "- It is a/an ...");

            String statement = scanner.nextLine();
            System.out.println("Is the statement correct for " + animal + "?");
            String answer = askYesOrNo();
            Description description = Description.handleDescription(statement);
            Description negativeDescription = description.getNegativeDescription();
            newQuestion = description.getQuestion();
            switch (answer) {
                case "Yes":
                    System.out.println(description.getCharacteristicWithAnimal(animal));
                    System.out.println(negativeDescription.getCharacteristicWithAnimal(oldAnimal));
                    System.out.println("I can distinguish these animals by asking the question:");
                    System.out.println(newQuestion);

                    binaryTree.current.data = newQuestion;
                    binaryTree.current.right = new Node(animal);
                    binaryTree.current.left = new Node(oldAnimal);
                    binaryTree.setCurrentToStart();

                    break;
                case "No":
                    System.out.println(description.getCharacteristicWithAnimal(oldAnimal));
                    System.out.println(negativeDescription.getCharacteristicWithAnimal(animal));
                    System.out.println("I can distinguish these animals by asking the question:");
                    System.out.println(newQuestion);

                    binaryTree.current.data = newQuestion;
                    binaryTree.current.right = new Node(oldAnimal);
                    binaryTree.current.left = new Node(animal);
                    binaryTree.setCurrentToStart();
                    break;
                default:
                    Answer.askAgain();
            }
        }

        private String askYesOrNo() {
            String respond = scanner.nextLine();
            String answer = Answer.handleYesOrNo(respond);

            while (!answer.equals("Yes") && !answer.equals("No")) {
                System.out.println(answer);
                respond = scanner.nextLine();
                answer = Answer.handleYesOrNo(respond);
            }
            return answer;
        }

    }
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "the-first-question",
                "positive-answers",
                "negative-answers",
                "unclear-answers",
                "file-formats"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) {
            return new Scenario(script).check();
        }

        @DynamicTest
        CheckResult testFileFormats() {
            deleteTestFiles();
            final var result = new Scenario("file-formats").check();
            deleteTestFiles();
            return result;
        }

        private void deleteTestFiles() {
            Stream.of("yaml", "json", "xml")
                    .map("animals."::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/Description.java
  visible: true
  text: |
    package animals;

    public class Description {

        private int type;
        private String characteristic;

        public Description() {
        }

        public Description(int type, String characteristic) {
            this.type = type;
            this.characteristic = characteristic;
        }

        public static Description handleDescription(String statement) {

            Description description = new Description();

            String can = "it can .+";
            String has = "it has .+";
            String is = "it is .+";


            if (statement.strip().toLowerCase().matches(can)) {
                description.type = 1;
                description.characteristic = statement.substring(7);
            } else if (statement.strip().toLowerCase().matches(has)) {
                description.type = 2;
                description.characteristic = statement.substring(7);
            } else if (statement.strip().toLowerCase().matches(is)) {
                description.type = 3;
                description.characteristic = statement.substring(6);
            } else {
                description.type = 0;
            }
            return description;
        }

        public Description getNegativeDescription() {
            Description negativeDescription = null;
            int type = this.type;
            switch (type) {
                case 1:
                    negativeDescription = new Description(11, this.characteristic);
                    break;
                case 2:
                    negativeDescription = new Description(22, this.characteristic);
                    break;
                case 3:
                    negativeDescription = new Description(33, this.characteristic);
                    break;
                default:
            }
            return negativeDescription;
        }

        public String getCharacteristicWithAnimal(String animal) {
            StringBuilder characteristics = new StringBuilder();
            characteristics.append("- The ").append(AnimalIdentifier.getAnimalName(animal, false)).append(" ");
            int type = this.type;
            switch (type) {
                case 1:
                    characteristics.append("can ").append(this.characteristic);
                    break;
                case 2:
                    characteristics.append("has ").append(this.characteristic);
                    break;
                case 3:
                    characteristics.append("is ").append(this.characteristic);
                    break;
                case 11:
                    characteristics.append("can't ").append(this.characteristic);
                    break;
                case 22:
                    characteristics.append("doesn't have ").append(this.characteristic);
                    break;
                case 33:
                    characteristics.append("isn't ").append(this.characteristic);
                    break;
                default:
            }
            characteristics.append(".");

            return characteristics.toString();
        }

        public String getQuestion() {
            StringBuilder question = new StringBuilder();
                int type = this.type;
                switch (type) {
                    case 1:
                        question.append("Can it ").append(this.characteristic).append("?\n");
                        break;
                    case 2:
                        question.append("Does it have ").append(this.characteristic).append("?\n");
                        break;
                    case 3:
                        question.append("Is it ").append(this.characteristic).append("?\n");
                        break;
                    default:
                }
            return question.toString();
        }

        public static String getQuestion(String animal) {
            return "Is it " + animal + "?";

        }
    }
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: src/animals/Node.java
  visible: true
  text: |
    package animals;

    public class Node {
        String data;
        Node left;
        Node right;

        public Node(String data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        public String getData() {
            return data;
        }

        public Node getLeft() {
            return left;
        }

        public Node getRight() {
            return right;
        }
    }
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - Ð´Ð°
    - - Ð¢Ð°Ðº
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natÃ¼rlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: src/animals/BinaryTree.java
  visible: true
  text: |
    package animals;

    public class BinaryTree {

        Node root;
        Node current;

        public BinaryTree() {
            this.root = null;
            this.current = null;
        }

        public void insert(String info, String move) {
            root = insertItem(root, info, move);
        }

        public void setCurrent(Node current) {
            this.current = current;
        }

        public Node getCurrent() {
            return current;
        }

        private Node insertItem(Node newRoot, String value, String move) {
            if (newRoot == null) {
                newRoot = new Node(value);
                return newRoot;
            } else if (move.equals("Yes")) {
                newRoot.right = insertItem(newRoot.right, value, move);
            } else if (move.equals("No")) {
                newRoot.left = insertItem(newRoot.left, value, move);
            }
            return newRoot;
        }

        public void setCurrentToStart() {
            current = root;
        }

        public void moveCurrentToNo() {
            current = current.left;
        }

        public void moveCurrentToYes() {
            current = current.right;
        }

        public boolean isEmpty() {
            if (root == null) {
                return true;
            } else {
                return false;
            }
        }

        public boolean isAtEnd() {
            if ((current != null) && (current.left == null && current.right == null)) {
                return true;
            } else {
                return false;
            }
        }

        public String getCurrentData() {
            return current.getData();
        }

        public String getRootData() {
            return root.getData();
        }

        void print() {
            System.out.println("*****");
            PrintTree(root);
            System.out.println("*****");
        }

        private void PrintTree(Node root){
            if (root != null){
                System.out.println(root.getData());
                PrintTree(root.getLeft());
                PrintTree(root.getRight());
            }
        }

        public void printCurrent() {
            System.out.println("CURRENT: ");
            System.out.println(current.getData());
            System.out.println("LEFT - " + current.getLeft().getData());
            System.out.println("RIGHT - " + current.getRight().getData());
        }

    }
  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [matches, "(?si).*animal.*", The program should asks the user for a favourite animal]
    - [input, cat]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, Yes]
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    - - file exists
      - "animals.{0}"
      - When the program started with option "java -type {0}" the data should be saved to "animals.{0}"

    #
    # Start the program again and load the Knowledge Tree
    #

    - [start, "-type {0}"]
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""]
    #
    # The third game started. Test for the Knowledge Tree.
    #
    - - contains
      - Can it climbs tree?
      - The root question in knowledge tree should be "Can it climbs tree?"
    - [input, yes]
    - - contains
      - Is it living in the forest?
      - The second question should be 'Is it living in the forest?'
    - [input, sure]
    - - contains
      - Is it a lynx?
      - The last question should be 'Is it a lynx?'
    - [input, right]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    #
    # Clear workspace after the test
    #
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."

  learner_created: false
- name: src/animals/FileHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11082#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 12 Mar 2023 20:55:02 UTC
record: 4
