type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |+
    package animals;

    public class Main {
        public static void main(String[] args) {
            new Program().start();
        }
    }

  learner_created: false
- name: src/animals/AnimalIdentifier.java
  visible: true
  text: |
    package animals;

    public class AnimalIdentifier {

        public static String getAnimal (String text) {
            StringBuilder animal = new StringBuilder();
            String article = null;

            String[] fullText = text.toLowerCase().split(" ");
            if (fullText.length == 1) {
                animal.append(fullText[0]);
            } else {
                int start = 0;

                switch (fullText[0]) {
                    case "an":
                        article = "an";
                        start = 1;
                        break;
                    case "a":
                        article = "a";
                        start = 1;
                        break;
                    case "the":
                        start = 1;
                        break;
                }
                for (int i = start; i < fullText.length; i++) {
                    if (i == fullText.length - 1) {
                        animal.append(fullText[i]);
                    } else {
                        animal.append(fullText[i]).append(" ");
                    }
                }
            }
            article = getArticle(animal.toString(), article);
            return article + " " + animal;

        }

        private static String getArticle(String animal, String article) {
            String vowels = "[aeiou]+.*";
            if (article == null) {
                if (animal.matches(vowels)) {
                    return "an";
                } else return "a";
            } else {
                return article;
            }
        }
    }
  learner_created: false
- name: src/animals/Program.java
  visible: true
  text: |
    package animals;

    import java.util.Scanner;

    public class Program {
        private final Scanner scanner = new Scanner(System.in);

        public void start() {
            TimeDefiner.getGreetings();
            System.out.println("\nEnter an animal: ");
            String text = scanner.nextLine();
            System.out.println("Is it " + AnimalIdentifier.getAnimal(text) + "?");
            askYesOrNo();
            Answer.sayGoodBye();
        }

        private void askYesOrNo() {
            String respond = scanner.nextLine();
            String answer = Answer.handleAnswer(respond);

            while (!answer.equals("Yes") && !answer.equals("No")) {
                System.out.println(answer);
                respond = scanner.nextLine();
                answer = Answer.handleAnswer(respond);
            }
            System.out.println("You answered: " + answer);
            System.out.println();
        }

    }
  learner_created: false
- name: src/animals/Answer.java
  visible: true
  text: |
    package animals;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;

    public class Answer {

        public static String handleAnswer(String answer) {
            String isPositive = "(y|yes|yeah|yep|sure|right|affirmative|correct|indeed|you bet|exactly|you said it)[.!]?";
            String isNegative = "(n|no|no way|nah|nope|negative|I don't think so|yeah no)[.!]?";
            if (answer.strip().toLowerCase().matches(isPositive)) {
                return "Yes";
            } else if (answer.strip().toLowerCase().matches(isNegative)) {
                return "No";
            } else {
                return askAgain();
            }
        }

        private static String askAgain() {

            List<String> list = new ArrayList<>();
            list.add("I'm not sure I caught you: was it yes or no?");
            list.add("Oh, it's too complicated for me: just tell me yes or no.");
            list.add("Funny, I still don't understand, is it yes or no?");
            list.add("Could you please simply say yes or no?");
            list.add("Oh, no, don't try to confuse me: say yes or no.");

            return list.get(new Random().nextInt(list.size()));
        }

        public static void sayGoodBye() {
            List<String> list = new ArrayList<>();
            list.add("Have a good one!");
            list.add("Take care!");
            list.add("See you later!");
            list.add("Talk to you later!");
            list.add("Catch you later!");
            list.add("Farewell!");
            list.add("Bye-bye");
            list.add("So long!");
            list.add("All right then!");
            list.add("Take it easy");
            list.add("Cheers!");
            list.add("Peace!");
            list.add("Iâ€™m out of here");
            list.add("Toodle-oo!");
            list.add("See you later alligator!");

            System.out.println(list.get(new Random().nextInt(list.size())));
        }

    }
  learner_created: false
- name: src/animals/TimeDefiner.java
  visible: true
  text: |
    package animals;

    import java.time.LocalTime;

    public class TimeDefiner {

        public static void getGreetings() {
            LocalTime localTime = LocalTime.now();
            LocalTime morning = LocalTime.of(5, 0);
            LocalTime afternoon = LocalTime.NOON;
            LocalTime evening = LocalTime.of(18, 0);
            LocalTime night = LocalTime.MIDNIGHT;
            LocalTime earlyBird = LocalTime.of(3, 0);

            if (localTime.isAfter(morning) && localTime.isBefore(afternoon)) {
                System.out.println("Good morning!");
            } else if (localTime.isAfter(afternoon) && localTime.isBefore(evening)) {
                System.out.println("Good afternoon!");
            } else if (localTime.isAfter(evening) && localTime.isBefore(night)) {
                System.out.println("Good evening!");
            } else if (localTime.isAfter(night) && localTime.isBefore(earlyBird)) {
                System.out.println("Hi, Night Owl");
            } else if (localTime.isAfter(earlyBird) && localTime.isBefore(morning)) {
                System.out.println("Hi, Early Bird");
            } else {
                System.out.println("What time is it now?");
            }
        }

    }
  learner_created: false
- name: test/complete-scenario.data.yaml
  visible: false
  text: |
    #
    # The data for the complete scenario from the start to the finish
    #
    ---
    - - "cat"
      - "DOG"
      - "a cat"
      - "a dog"
      - "It can climb trees"
      - "ha"
      - "no"
      - "The cat can climb trees"
      - "The dog can't climb trees"
      - "Can it climb trees?"

    - - "hare"
      - "wolf"
      - "a hare"
      - "a wolf"
      - "It is a shy animal"
      - "nej"
      - "no"
      - "The hare is a shy animal"
      - "The wolf isn't a shy animal"
      - "Is it a shy animal?"

    - - "a lynx"
      - "an unicorN"
      - "a lynx"
      - "an unicorn"
      - "It is a fabulous animal?"
      - "of c"
      - "yes"
      - "The lynx isn't a fabulous animal"
      - "The unicorn is a fabulous animal"
      - "Is it a fabulous animal?"
  learner_created: false
- name: test/complete-scenario.script.yaml
  visible: false
  text: |-
    #
    # This script emulate complete sessions from start to the finish
    #
    ---
    - [start]
    - [contains, first animal, The program should asks the user for an first animal name]
    - [input, "{0}"]
    - [contains, second animal, The program should asks the user for an second animal name]
    - [input, "{1}"]
    - - contains
      - "Specify a fact that distinguishes {2} from {3}."
      - The program should asks the user for a fact
    - [input, "{4}"]
    - - contains
      - "correct for {3}?"
      - "The program should clarify if the statement is correct for {3}."
    #
    # Here the user unclear answer and the program should ask again
    #
    - [input, "{5}"]
    - - contains
      - yes or no
      - "The user input {5} should not be recognized as correct answer. The program should ask the user again."
    #
    # Here the user answer correctly
    #
    - [input, "{6}"]
    #
    # The program should generate two facts and the question
    #
    - - contains
      - "{7}"
      - The program should generate a fact about the first animals.
    - - contains
      - "{8}"
      - The program should generate a fact about the second animals.
    - - contains
      - "{9}"
      - The program should generate a closed question.
    - - finish
      - The program should finish after the correct response.
  learner_created: false
- name: test/correct-statement.data.yaml
  visible: false
  text: |
    ---
    - - "It is a mammal"
    - - "It can barks"
    - - "It has a tail"
    - - "IT IS A SHY ANIMAL"
    - - "it CAN swim and fly"
    - - "it has long tooth."
    - - "iT has five legs"
    - - "It can catch a mouse."
    - - "it is a danger predator."
    - - "It is living in the forest."
  learner_created: false
- name: test/correct-statement.script.yaml
  visible: false
  text: |
    #
    # This is a script to test correct statements.
    #
    ---
    - [start]
    - [input, cat]
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog.
      - The program should asks the user for a fact
    #
    # Here we substitute all correct statements from data file
    #
    - [input, "{0}"]
    - - contains
      - correct for a dog?
      - The program should clarify if the statement is correct for a dog.
  learner_created: false
- name: test/facts-and-question.data.yaml
  visible: false
  text: |
    #
    # This is a data file to test generated facts and a question
    #

    # --- user input ---
    # The first animal
    # The second animal
    # The statement
    # Is the statement correct for the second animal?

    # --- expected output ---
    # The fact for the first animal
    # The fact for the second animal
    # The closed question to distinguishes one animal from other
    ---
    - - cat
      - shark
      - it is a mammal
      - no
      - "The cat is a mammal."
      - "The shark isn't a mammal."
      - "Is it a mammal?"

    - - wolf
      - hare
      - it is a shy animal
      - yes
      - "The wolf isn't a shy animal."
      - "The hare is a shy animal."
      - "Is it a shy animal?"


    - - wolf
      - fox
      - it has a long bushy tail
      - yes
      - "The wolf doesn't have a long bushy tail."
      - "The fox has a long bushy tail."
      - "Does it have a long bushy tail?"

    - - dog
      - cat
      - it can climb trees
      - yes
      - "The dog can't climb trees."
      - "The cat can climb trees."
      - "Can it climb trees?"

    - - dog
      - fox
      - it is living in the forest
      - yes
      - "The dog isn't living in the forest."
      - "The fox is living in the forest."
      - "Is it living in the forest?"
  learner_created: false
- name: test/facts-and-question.script.yaml
  visible: false
  text: |-
    #
    # This script to test generation of facts and a question
    #
    ---
    - [start]
    #
    # Here we send to the input the names of two animals and the statement.
    #
    - [input, "{0}"]  # The first animal
    - [input, "{1}"]  # The second animal
    - [input, "{2}"]  # The statement
    - [input, "{3}"]  # Is the statement correct for the second animal?
    #
    # The program should generate two facts and the question
    #
    - - contains
      - "{4}"
      - "The program should generate a fact about {0}. The fact should be â€œ{4}â€œ."

    - - contains
      - "{5}"
      - "The program should generate a fact about {1}. The fact should be â€œ{5}â€œ."

    - - contains
      - "{6}"
      - "The program should generate a closed question: â€œ{6}â€œ from statement â€œ{2}â€œ."

    - [finish, The program should finish.]
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {

        final String[] script = new String[]{
                "incorrect-statement",
                "correct-statement",
                "complete-scenario",
                "facts-and-question"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }

  learner_created: false
- name: test/incorrect-statement.data.yaml
  visible: false
  text: |
    #
    # All of these statements are wrong.
    #
    ---
    - - "The dog barks"
    - - "The cat meows"
    - - "I don't know..."
    - - "Who knows?"
    - - "It flies"
    - - "It barks"
    - - "Can it fly?"
    - - "It fly"
    - - "may be it barks?"
    - - "I do not what to say..."
  learner_created: false
- name: test/incorrect-statement.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the reaction to incorrect statements.
    #
    ---
    - [start]
    - [input, cat]
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog.
      - The program should asks the user for a fact
    #
    # Here we substitute all incorrect statements from data file
    #
    - [input, "{0}"]
    - - contains
      - "examples of a statement"
      - "The statement \"{0}\" doesn't fit the template. The program should show examples and ask the user again."
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/Animal.java
  visible: true
  learner_created: true
- name: src/animals/Description.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11080#comment
status: Solved
record: 1
